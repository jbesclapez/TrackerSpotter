"""
Test Kit - Generate dummy .torrent files for testing TrackerSpotter
"""

import hashlib
import os
from pathlib import Path
from typing import List, Dict
import bencodepy


class TorrentGenerator:
    """Generate test .torrent files"""
    
    def __init__(self, output_dir: str = "test_torrents"):
        """
        Initialize torrent generator
        
        Args:
            output_dir: Directory to save generated .torrent files
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
    
    def create_test_torrent(
        self,
        name: str,
        file_size: int,
        tracker_url: str,
        piece_length: int = 16384
    ) -> Path:
        """
        Create a test .torrent file
        
        Args:
            name: Name of the file in the torrent
            file_size: Size of the file in bytes
            tracker_url: Tracker announce URL
            piece_length: Size of each piece (default 16KB)
            
        Returns:
            Path to created .torrent file
        """
        # Create dummy file data (all zeros for simplicity)
        file_data = b'\x00' * file_size
        
        # Calculate pieces hashes
        pieces = b''
        for i in range(0, file_size, piece_length):
            chunk = file_data[i:i + piece_length]
            pieces += hashlib.sha1(chunk).digest()
        
        # Build info dictionary
        info = {
            b'name': name.encode('utf-8'),
            b'piece length': piece_length,
            b'pieces': pieces,
            b'length': file_size,
        }
        
        # Build complete torrent dictionary
        torrent = {
            b'announce': tracker_url.encode('utf-8'),
            b'info': info,
            b'comment': b'Generated by TrackerSpotter Test Kit',
            b'created by': b'TrackerSpotter v1.0.0',
            b'creation date': 1704067200,  # 2024-01-01
        }
        
        # Bencode the torrent
        torrent_data = bencodepy.encode(torrent)
        
        # Save to file
        torrent_filename = self.output_dir / f"{name}.torrent"
        with open(torrent_filename, 'wb') as f:
            f.write(torrent_data)
        
        # Calculate and print info hash
        info_hash = hashlib.sha1(bencodepy.encode(info)).hexdigest()
        
        print(f"âœ“ Created: {torrent_filename}")
        print(f"  Info Hash: {info_hash}")
        print(f"  File Size: {self.format_bytes(file_size)}")
        
        return torrent_filename
    
    def create_test_suite(self, tracker_url: str) -> List[Path]:
        """
        Create a suite of 5 test torrents with varying sizes
        
        Args:
            tracker_url: Tracker announce URL
            
        Returns:
            List of paths to created .torrent files
        """
        print(f"\nCreating Test Torrent Suite")
        print(f"Output Directory: {self.output_dir.absolute()}")
        print(f"Tracker URL: {tracker_url}\n")
        
        test_torrents = [
            ("test_tiny", 1024),          # 1 KB
            ("test_small", 10240),        # 10 KB
            ("test_medium", 102400),      # 100 KB
            ("test_large", 1048576),      # 1 MB
            ("test_xlarge", 10485760),    # 10 MB
        ]
        
        created_files = []
        
        for name, size in test_torrents:
            try:
                torrent_path = self.create_test_torrent(name, size, tracker_url)
                created_files.append(torrent_path)
                print()
            except Exception as e:
                print(f"[ERROR] Failed to create {name}: {e}\n")
        
        print(f"\n[SUCCESS] Successfully created {len(created_files)} test torrents!")
        print(f"\nNext Steps:")
        print(f"1. Create dummy files to match the torrents:")
        
        for name, size in test_torrents:
            print(f"   - Create a file named '{name}' with size {self.format_bytes(size)}")
        
        print(f"\n2. Add the .torrent files to your torrent client")
        print(f"3. Make sure the tracker URL is set to: {tracker_url}")
        print(f"4. Start the torrents and watch TrackerSpotter!")
        print(f"\n{'='*60}")
        
        return created_files
    
    @staticmethod
    def format_bytes(bytes_value: int) -> str:
        """Format bytes to human-readable format"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if bytes_value < 1024.0:
                return f"{bytes_value:.2f} {unit}"
            bytes_value /= 1024.0
        return f"{bytes_value:.2f} TB"


def create_dummy_files(output_dir: str = "test_torrents"):
    """
    Create dummy files to go with test torrents
    
    Args:
        output_dir: Directory to save dummy files
    """
    output_path = Path(output_dir)
    output_path.mkdir(exist_ok=True)
    
    test_files = [
        ("test_tiny", 1024),
        ("test_small", 10240),
        ("test_medium", 102400),
        ("test_large", 1048576),
        ("test_xlarge", 10485760),
    ]
    
    print(f"\nCreating Dummy Files")
    print(f"Output Directory: {output_path.absolute()}\n")
    
    for name, size in test_files:
        file_path = output_path / name
        
        try:
            # Create file filled with zeros
            with open(file_path, 'wb') as f:
                f.write(b'\x00' * size)
            
            print(f"[OK] Created: {file_path} ({TorrentGenerator.format_bytes(size)})")
        except Exception as e:
            print(f"[ERROR] Failed to create {name}: {e}")
    
    print(f"\n[SUCCESS] Dummy files created successfully!")


def main():
    """Main entry point for test kit"""
    import sys
    
    # Try to set UTF-8 encoding
    try:
        sys.stdout.reconfigure(encoding='utf-8')
    except Exception:
        pass
    
    # Default tracker URL
    default_tracker = "http://127.0.0.1:6969/announce"
    
    print("""
=============================================================
          TrackerSpotter Test Kit Generator

  This tool creates dummy .torrent files for testing
=============================================================
""")
    
    # Get tracker URL
    if len(sys.argv) > 1:
        tracker_url = sys.argv[1]
    else:
        tracker_url = input(f"Enter tracker URL (default: {default_tracker}): ").strip()
        if not tracker_url:
            tracker_url = default_tracker
    
    # Generate torrents
    generator = TorrentGenerator()
    torrents = generator.create_test_suite(tracker_url)
    
    # Ask if user wants to create dummy files
    create_files = input("\nCreate dummy files to match torrents? (y/N): ").strip().lower()
    if create_files == 'y':
        create_dummy_files()
    
    print(f"\n{'='*60}")
    print("Test Kit Setup Complete!")
    print(f"{'='*60}")
    print(f"\nGenerated {len(torrents)} test torrents in: test_torrents/")
    print(f"\nTo use them:")
    print(f"1. Open your torrent client (qBittorrent, Transmission, etc.)")
    print(f"2. Add the .torrent files from the test_torrents directory")
    print(f"3. Make sure TrackerSpotter is running")
    print(f"4. Start the torrents and watch events appear!")
    print(f"\nHappy testing!\n")


if __name__ == '__main__':
    main()

